@page "/Login"
@using CarRentalClientServer.Models
@using CarRentalClientServer.Authentification
@using Blazorise.Extensions

@inject NavigationManager navMgr
@inject AuthenticationStateProvider authenticationStateProvider

<Div Padding="Padding.Is5"></Div>
<Div Padding="Padding.Is5"></Div>

<AuthorizeView>
    <NotAuthorized>
        <Field Horizontal="true" Flex="Flex.JustifyContent.Center">
            <Card Style="@LoginStyle" Shadow="Shadow.Large">
                <Validations Mode="ValidationMode.Auto" Model="@loginCredentials">
                    <DisplayHeading Size="DisplayHeadingSize.Is3" Flex="Flex.JustifyContent.Center">Login</DisplayHeading>
                    <CardBody Flex="Flex.JustifyContent.Center">
                        <Row>
                            <Column ColumnSize="ColumnSize.IsFull">
                                <Validation>
                                    <Fields>
                                        <Field>
                                            <FieldLabel>Email</FieldLabel>
                                            <TextEdit Placeholder="Enter your email" @bind-Text="@loginCredentials.Email"/>
                                            <ValidationError/>
                                        </Field>
                                    </Fields>
                                </Validation>

                                <Fields>
                                    <Field>
                                        <FieldLabel>Password</FieldLabel>
                                        <TextEdit Role="TextRole.Password" Placeholder="Enter password" @bind-Text="@loginCredentials.Password"/>
                                        <ValidationError/>
                                    </Field>
                                </Fields>
                                <Fields>
                                    <Paragraph>Don't have account ? </Paragraph>
                                    <Link To="/Signup">Create one !</Link>
                                </Fields>
                            </Column>
                        </Row>
                    </CardBody>
                    <Label TextColor="TextColor.Primary" Position="new FluentPosition()">@bottomLabel</Label>
                </Validations>
                <Button Color="Color.Primary" Clicked="@Login" Size="Size.Large">Login</Button>
            </Card>
        </Field>
    </NotAuthorized>
    <Authorized>
        <div class="form-group col-md-3">
            <p class="actions">
                <button class="btn btn-outline-dark" @onclick="LogOut">Log Out</button>
            </p>
        </div>
    </Authorized>
</AuthorizeView>

@code {

    private string bottomLabel = "";
    private Customer loginCredentials = new Customer();
    private string LoginStyle = $"width: 800px";


    private async Task Login()
    {
        if (loginCredentials.Email.IsNullOrEmpty() || loginCredentials.Password.IsNullOrEmpty())
        {
            bottomLabel = "Fill in the email and the password";
        }
        bottomLabel = "";
        try
        {
            await ((CustomAuthenticationStateProvider) authenticationStateProvider).ValidateLogin(loginCredentials.Email, loginCredentials.Password);
    //if something goes wrong this should throw and exc, so the following code wont get executed if the user wasnt validated successfully
            loginCredentials.Password = "";
        }
        catch (Exception e)
        {
            if (e.Message.Equals("NotFound"))
            {
                bottomLabel = "Login not successful: This combination of email and password is incorrect";
            }
            bottomLabel = $"Login not successful: {e.Message}";
            Console.WriteLine(e);
        }
    }

    private void LogOut()
    {
        try
        {
            ((CustomAuthenticationStateProvider) authenticationStateProvider).Logout();
            bottomLabel = "Successfully logged out";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}