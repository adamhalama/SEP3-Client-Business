@page "/Reservations"
@attribute [Authorize(Policy = "SecurityLevel0")]

@using CarRentalClientServer.Models

<Div Padding="Padding.Is4"></Div>
<Card>
    <CardBody>
        <Heading Size="HeadingSize.Is2">Reservation history</Heading>
    </CardBody>
</Card>


<Div Padding="Padding.Is4"></Div>

<Card>
                <CardHeader>
                    <CardTitle>Detail</CardTitle>
                </CardHeader>
                <CardBody>
                    <Fields>
                        <Field>
                            <FieldLabel>Customer name</FieldLabel>
                            <FieldBody>
                                <NumericEdit ReadOnly Value="@selectedReserve?.CustomerId"></NumericEdit>
                            </FieldBody>
                        </Field>
                        <!--customer name-->
                        <!--employee name-->
                        <!--vehicle name-->
                        <Field>
                            <FieldLabel>Security deposit</FieldLabel>
                            <FieldBody>
                                <NumericEdit ReadOnly Value="@selectedReserve?.SecurityDeposit"></NumericEdit>
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldLabel>Total amount</FieldLabel>
                            <FieldBody>
                                <NumericEdit ReadOnly Value="@selectedReserve?.PaymentAmount"></NumericEdit>
                            </FieldBody>
                        </Field>
                        <!-- change type to Date in the future -->
                        <Field>
                            <FieldLabel>Date created</FieldLabel>
                            <FieldBody>
                                <NumericEdit ReadOnly Value="@selectedReserve?.DateCreated"></NumericEdit>
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldLabel>Date start</FieldLabel>
                            <FieldBody>
                                <NumericEdit ReadOnly Value="@selectedReserve?.DateStart"></NumericEdit>
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldLabel>Date end</FieldLabel>
                            <FieldBody>
                                <NumericEdit ReadOnly Value="@selectedReserve?.DateEnd"></NumericEdit>
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldLabel>Bill date</FieldLabel>
                            <FieldBody>
                                <NumericEdit ReadOnly Value="@selectedReserve?.BillDate"></NumericEdit>
                            </FieldBody>
                        </Field>

                        <Field>
                            <FieldLabel>Allowed distance</FieldLabel>
                            <FieldBody>
                                <NumericEdit ReadOnly Value="@selectedReserve?.AllowedKm"></NumericEdit>
                            </FieldBody>
                        </Field>

                    </Fields>
                </CardBody>
            </Card>

<DataGrid TItem="ReservationTest" Data="@listTest"
          @bind-SelectedRow="@selectedReserve" Responsive
          Filterable FilterMethod="DataGridFilterMethod.StartsWith">
          <!--Add filter for employee name and ca rname, remove filter for amount-->
    <DataGridColumns>
        <DataGridColumn TItem="ReservationTest" Field="@nameof(ReservationTest.Id)" Caption="Id" Filterable=false />
        <!--customer name-->
        <!--employee name-->
        <!--vehicle name-->
        <DataGridDateColumn TItem="ReservationTest" Field="@nameof(ReservationTest.DateStart)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Date start" Filterable=false />
        <DataGridColumn TItem="ReservationTest" Field="@nameof(ReservationTest.BillDate)" Caption="Bill date" Filterable=false />
        <DataGridColumn TItem="ReservationTest" Field="@nameof(ReservationTest.PaymentAmount)" Caption="Amount" />
        <DataGridColumn TItem="ReservationTest" Field="@nameof(ReservationTest.IsPaid)" Caption="Status" CustomFilter="@StatusCustomerFilter">
            <FilterTemplate>
                <Select TValue="string" SelectedValue="@selectedStatusFilter" SelectedValueChanged="@(value => {selectedStatusFilter = value;context.TriggerFilterChange( selectedStatusFilter); })">
                    <SelectItem TValue="string" Value="@("*")">All</SelectItem>
                    <SelectItem TValue="bool" Value="@(true)">Paid</SelectItem>
                    <SelectItem TValue="bool" Value="@(false)">Not paid</SelectItem>
                </Select>
            </FilterTemplate>

            <DisplayTemplate>
                @{
                    var isPaid = (context as ReservationTest)?.IsPaid;
                    @if (isPaid == true)
                    {
                        @("Paid")
                    }
                    else
                    {
                        @("Not paid or canceled")
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

@code {
    private Modal modalInfo;
    Customer user = new Customer();
    //connect to the database

    //test parts below, delete after connection finished
    private ReservationTest selectedReserve;

    string selectedStatusFilter;
    private bool StatusCustomerFilter(object itemValue, object searchValue)
    {
        if (searchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == itemValue?.ToString();
        }
        return true;
    }

    private List<ReservationTest> listTest = new()
        {
            new()
            {
                Id = 1,
                VehicleId = 2,
                CustomerId = 2,
                EmployeeId = 3,
                SecurityDeposit = 500,
                DateCreated = 1627870693,
                DateStart = 1627957093,
                DateEnd = 1628216293,
                AllowedKm = 1500,
                PaymentAmount = 3400,
                BillDate = 1627870950,
                IsPaid = true
            },
            new()
            {
                Id = 2,
                VehicleId = 2,
                CustomerId = 2,
                EmployeeId = 3,
                SecurityDeposit = 500,
                DateCreated = 1627870693,
                DateStart = 1627957093,
                DateEnd = 1628216293,
                AllowedKm = 1500,
                PaymentAmount = 5900,
                BillDate = 1627871800,
                IsPaid = false
            },
            new()
            {
                Id = 3,
                VehicleId = 2,
                CustomerId = 2,
                EmployeeId = 3,
                SecurityDeposit = 500,
                DateCreated = 1627870693,
                DateStart = 1627957093,
                DateEnd = 1628216293,
                AllowedKm = 1500,
                PaymentAmount = 4660,
                BillDate = 1627870950,
                IsPaid = true
            }
        };

    private List<CustomerTest> customerTestList = new()
        {
            new()
            {
                Id = 1,
                Name = "AB"
            },
            new()
            {
                Id = 2,
                Name = "DD"
            },
            new()
            {
                Id = 3,
                Name = "EE"
            }
        };

    private List<CarTest> carTestList = new()
        {
            new()
            {
                Id = 1,
                Name = "CAR1"
            },
            new()
            {
                Id = 2,
                Name = "CAR2"
            },
            new()
            {
                Id = 3,
                Name = "CAR3"
            }
        };

    public class ReservationTest
    {
        public long Id { get; set; }
        public long VehicleId { get; set; }
        public long CustomerId { get; set; }
        public long EmployeeId { get; set; }
        public int SecurityDeposit { get; set; }
        public long DateCreated { get; set; }
        public long DateStart { get; set; }
        public long DateEnd { get; set; }
        public int AllowedKm { get; set; }
        public int PaymentAmount { get; set; }
        public long BillDate { get; set; }
        public bool IsPaid { get; set; }
    }

    public class CustomerTest
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class CarTest
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
}
