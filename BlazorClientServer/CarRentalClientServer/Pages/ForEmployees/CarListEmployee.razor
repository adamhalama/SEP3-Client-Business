@page "/AllCars"
@attribute [Authorize(Policy = "SecurityLevel1")]

@using CarRentalClientServer.Data
@using CarRentalClientServer.Models
@inject IVehicleService VehicleData

<Jumbotron>
    <JumbotronTitle Size="JumbotronTitleSize.Is3">Whole car list</JumbotronTitle>
    <JumbotronSubtitle>
        All the cars.
    </JumbotronSubtitle>
    @if (_showError)
        {
            <Paragraph TextColor="TextColor.Danger">
                @_errorLabel
            </Paragraph>
        }
</Jumbotron>
<h3>We have four types of car for you.</h3>
<Bar Breakpoint="Breakpoint.Desktop" Background="Background.Light" ThemeContrast="ThemeContrast.Light" Shadow="Shadow.Small">
    <BarMenu>
        <BarStart>
            <Button Color="Color.None" Clicked="@ShowSedan">
                <img src="/Img/Sedan.png" style="width:40% "/>
                <p style="position:center">Sedan</p>
            </Button>
            <Button Color="Color.None" Clicked="@ShowLuxury">
                <img src="/Img/Luxury.png" style="width:40% "/>
                <p style="position:center">Luxury</p>
            </Button>
            <Button Color="Color.None" Clicked="@ShowSUV">
                <img src="/Img/SUV.png" style="width:40% "/>
                <p style="position:center">SUV</p>
            </Button>
            <Button Color="Color.None" Clicked="@ShowMPV">
                <img src="/Img/MPV.png" style="width:40% "/>
                <p style="position:center">MPV</p>
            </Button>
        </BarStart>
    </BarMenu>
</Bar>
<Div Padding="Padding.Is2"></Div>


<DataGrid TItem="Vehicle" Data="_vehicleList" 
          Editable="true"
          EditMode="DataGridEditMode.Form" UseInternalEditing
          ShowPager="true" PageSize="10"
          RowUpdated="@OnRowUpdated"
          RowInserted="@OnRowInserted"
          RowRemoved="@OnRowRemoved"
          NewItemDefaultSetter="@OnNewItemDefaultSetter"
          ReadData="@LoadFromService">

    <DataGridColumns>
        <DataGridCommandColumn TItem="Vehicle">
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
            </NewCommandTemplate>
            <SaveCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">Save</Button>
            </SaveCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
            </DeleteCommandTemplate>
            <CancelCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>


        <DataGridNumericColumn TItem="Vehicle" Field="@nameof(Vehicle.Id)" Caption="ID" Editable="false" Sortable="true" Filterable="false"/>
        <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.Name)" Caption="Name" Editable="true" Sortable="true"/>
        <DataGridNumericColumn TItem="Vehicle" Field="@nameof(Vehicle.PowerKw)" Caption="Power in KW" Editable="true" Sortable="true"/>
        <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.Type)" Caption="Type" Editable="true" Sortable="true" CustomFilter="@TypeFilter">
            <FilterTemplate>
                <Select TValue="string" SelectedValue="@_typeFilter" SelectedValueChanged="@(value => {_typeFilter = value;context.TriggerFilterChange(_typeFilter);})">
                    <SelectItem TValue="string" Value="@("*")">All</SelectItem>
                    <SelectItem TValue="string" Value="@("Sedan")">Sedan</SelectItem>
                    <SelectItem TValue="string" Value="@("Luxury")">Luxury</SelectItem>
                    <SelectItem TValue="string" Value="@("SUV")">SUV</SelectItem>
                    <SelectItem TValue="string" Value="@("MPV")">MPV</SelectItem>
                </Select>
            </FilterTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.PricePerDay)" Caption="Price per day" Editable="true" Sortable="true" Filterable="false"/>
        <DataGridNumericColumn TItem="Vehicle" Field="@nameof(Vehicle.SeatsCount)" Caption="Seat" Editable="true" Sortable="true" CustomFilter="@SeatFilter">
            <FilterTemplate>
                <Select TValue="string" SelectedValue="@_seatFilter" SelectedValueChanged="@(value => {_seatFilter = value; context.TriggerFilterChange(_seatFilter);})">
                    <SelectItem TValue="string" Value="@("*")">All</SelectItem>
                    <SelectItem TValue="int" Value="@(2)">2</SelectItem>
                    <SelectItem TValue="int" Value="@(4)">4</SelectItem>
                    <SelectItem TValue="int" Value="@(5)">5</SelectItem>
                    <SelectItem TValue="int" Value="@(6)">6</SelectItem>
                    <SelectItem TValue="int" Value="@(7)">7</SelectItem>
                    <SelectItem TValue="int" Value="@(8)">8</SelectItem>
                    <SelectItem TValue="int" Value="@(9)">9</SelectItem>
                </Select>
            </FilterTemplate>
        </DataGridNumericColumn>
        <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.FuelType)" Caption="Fuel Type" Editable="true" Sortable="true" Filterable="false">
            <FilterTemplate>
                <Select TValue="string" SelectedValue="@_typeFilter" SelectedValueChanged="@(value => {_typeFilter = value;context.TriggerFilterChange(_typeFilter);})">
                    <SelectItem TValue="string" Value="@("*")">All</SelectItem>
                    <SelectItem TValue="string" Value="@("Petrol")">Petrol</SelectItem>
                    <SelectItem TValue="string" Value="@("Diesel")">Diesel</SelectItem>
                    <SelectItem TValue="string" Value="@("Electric")">Electric</SelectItem>
                </Select>
            </FilterTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.Deposit)" Caption="Deposit" Editable="true" Sortable="true" Filterable="false"/>
        <DataGridCheckColumn TItem="Vehicle" Field="@nameof(Vehicle.IsAutomatic)" Caption="Automatic" Editable="true" Sortable="true" Filterable="true"/>
    </DataGridColumns>

    <EmptyTemplate>
        <div class="box">
            No Cars were found!
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <Progress class="progress is-small is-primary" @ref="ProgressRef" Color="Color.Primary" Max="100" Value="Progress"/>
        </div>
    </LoadingTemplate>

</DataGrid>

<Modal @ref="_sedanModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Sedan</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                A sedan is a passenger car in a three-box configuration with separate compartments for engine, passenger, and cargo.
            </Paragraph>
            <Paragraph>Can carry up to 5 people. Suitable for family travel.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideSedan">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="_luxuryModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Sedan</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                A luxury car is a car that provides increased levels of comfort, equipment, amenities, quality, performance, and status compared to regular cars for an increased price.
            </Paragraph>
            <Paragraph>Can carry up to 5 people. Suitable for high-end travel.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideLuxury">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="_suvModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>SUV</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                A sport utility vehicle or SUV is a car classification that combines elements of road-going passenger cars with features from off-road vehicles, such as raised ground clearance and four-wheel drive.
            </Paragraph>
            <Paragraph>Can carry up to 7 people. Suitable for field trips.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideSUV">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="_mpvModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>MPV</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                Minivan (sometimes called simply as van) is a North American car classification for vehicles designed to transport passengers in the rear seating row(s), with reconfigurable seats in two or three rows.
            </Paragraph>
            <Paragraph>Can carry up to 8 people. Suitable for business travel or family travel.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideMPV">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    protected Progress ProgressRef = new();
    protected int Progress;
    
    private IList<Vehicle> _vehicleList;
    
    private bool _showError = false;
    private string _errorLabel = "Error label";

    private Modal _sedanModal;
    private Modal _luxuryModal;
    private Modal _suvModal;
    private Modal _mpvModal;
    private string _typeFilter;
    private string _seatFilter;

    async Task LoadFromService(DataGridReadDataEventArgs<Vehicle> gridReadDataEventArgs)
    {
        ProgressRef.Animated = true;
        Progress = 0;
        await InvokeAsync(StateHasChanged);
        try
        {
            Progress = 5;
            await InvokeAsync(StateHasChanged);
            var fetchedVehicles = VehicleData.GetVehiclesAsync();
            Progress = 33;
            await Task.Delay(500);
            await InvokeAsync(StateHasChanged);
            await fetchedVehicles;
            Progress = 66;
            await Task.Delay(500);
            await InvokeAsync(StateHasChanged);
            _vehicleList = fetchedVehicles.Result;
            Progress = 100;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Progress = 100;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine(e);
            _errorLabel = "Error while loading data";
            _showError = true;
        }
    }

    private void OnNewItemDefaultSetter(Vehicle vehicle)
    {
        StateHasChanged();
    }

    async Task OnRowInserted(SavedRowItem<Vehicle, Dictionary<string, object>> item)
    {
        _showError = false;
        try
        {
        var v = item.Item;
        await VehicleData.CreateVehicleAsync(v.Name, v.Type, v.PricePerDay, v.SeatsCount,
            v.IsAutomatic, v.PowerKw, v.FuelType, v.Deposit);

        _vehicleList = await VehicleData.GetVehiclesAsync();
        StateHasChanged();
        }
        catch (Exception e)
        {
            _errorLabel = "Error while creating";
            _showError = true;
            Console.WriteLine(e);
        }
    }

    async Task OnRowUpdated(SavedRowItem<Vehicle, Dictionary<string, object>> item)
    {
        _showError = false;
        try
        {
            var v = item.Item;
            await VehicleData.UpdateVehicleAsync(v);

            _vehicleList = await VehicleData.GetVehiclesAsync();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _errorLabel = "Error while updating";
            _showError = true;
        }
    }

    async Task OnRowRemoved(Vehicle vehicle)
    {
        _showError = false;
        try
        {
        await VehicleData.DeleteVehicleAsync(vehicle.Id);

        _vehicleList = await VehicleData.GetVehiclesAsync();
        StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _errorLabel = "Error while removing";
            _showError = true;
        }
    }


    private bool TypeFilter(object itemValue, object searchValue)
    {
        if (searchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == itemValue?.ToString();
        }
        return true;
    }

    private bool SeatFilter(object seatValue, object seatSearchValue)
    {
        if (seatSearchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == seatValue?.ToString();
        }
        return true;
    }

    private Task ShowSedan()
    {
        return _sedanModal.Show();
    }

    private Task HideSedan()
    {
        return _sedanModal.Hide();
    }

    private Task ShowLuxury()
    {
        return _luxuryModal.Show();
    }

    private Task HideLuxury()
    {
        return _luxuryModal.Hide();
    }

    private Task ShowSUV()
    {
        return _suvModal.Show();
    }

    private Task HideSUV()
    {
        return _suvModal.Hide();
    }

    private Task ShowMPV()
    {
        return _mpvModal.Show();
    }

    private Task HideMPV()
    {
        return _mpvModal.Hide();
    }

    private List<Vehicle> vehicleListTest = new()
    {
        new()
        {
            Id = 1,
            Name = "CAR1",
            Type = "Sedan",
            PricePerDay = 100,
            SeatsCount = 4,
            IsAutomatic = true,
            PowerKw = 250,
            FuelType = "95",
            Deposit = 500,
        },
        new()
        {
            Id = 2,
            Name = "CAR2",
            Type = "Sedan",
            PricePerDay = 400,
            SeatsCount = 2,
            IsAutomatic = false,
            PowerKw = 400,
            FuelType = "92",
            Deposit = 800,
        },
        new()
        {
            Id = 3,
            Name = "CAR3",
            Type = "SUV",
            PricePerDay = 200,
            SeatsCount = 5,
            IsAutomatic = true,
            PowerKw = 300,
            FuelType = "95",
            Deposit = 700,
        },
        new()
        {
            Id = 4,
            Name = "CAR4",
            Type = "MPV",
            PricePerDay = 340,
            SeatsCount = 8,
            IsAutomatic = true,
            PowerKw = 300,
            FuelType = "Diesel",
            Deposit = 500,
        },
        new()
        {
            Id = 5,
            Name = "CAR5",
            Type = "SUV",
            PricePerDay = 600,
            SeatsCount = 4,
            IsAutomatic = false,
            PowerKw = 500,
            FuelType = "Diesel",
            Deposit = 1000,
        },
        new()
        {
            Id = 6,
            Name = "CAR6",
            Type = "Sedan",
            PricePerDay = 100,
            SeatsCount = 4,
            IsAutomatic = true,
            PowerKw = 250,
            FuelType = "92",
            Deposit = 500,
        },
        new()
        {
            Id = 7,
            Name = "CAR7",
            Type = "Luxury",
            PricePerDay = 730,
            SeatsCount = 4,
            IsAutomatic = true,
            PowerKw = 430,
            FuelType = "95",
            Deposit = 500,
        },
        new()
        {
            Id = 8,
            Name = "CAR8 OLD",
            Type = "MPV",
            PricePerDay = 360,
            SeatsCount = 8,
            IsAutomatic = false,
            PowerKw = 250,
            FuelType = "Diesel",
            Deposit = 500,
        }
    };

}