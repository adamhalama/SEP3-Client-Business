@page "/ReservationsEmployee"
@* @attribute [Authorize(Policy = "SecurityLevel1")] *@

@using CarRentalClientServer.Models
@using CarRentalClientServer.Data
@using CarRentalClientServer.Pages.ForCustomers
@using CarRentalClientServer.Utilities

@inject IReservationService reservationService;
@inject IVehicleService vehicleService;
@inject ICustomerService customerService;
@inject IEmployeeService employeeService;

<Div Padding="Padding.Is4"></Div>
<Jumbotron>
    <JumbotronTitle Size="JumbotronTitleSize.Is3">All the reservations</JumbotronTitle>
    <JumbotronSubtitle>
        The whole reservation list.
    </JumbotronSubtitle>
    @if (showError)
    {
        <Paragraph TextColor="TextColor.Danger">
            @errorLabel
        </Paragraph>
    }
</Jumbotron>

<DataGrid TItem="ReservationFormatted" Data="@reservationList"
          Sortable="true" Filterable="true" Editable="true"
          EditMode="DataGridEditMode.Form" UseInternalEditing
          ShowPager="true" PageSize="10"
          SortMode="DataGridSortMode.Single"
          RowUpdated="@OnRowUpdated"
          RowInserted="@OnRowInserted"
          RowRemoved="@OnRowRemoved"
          NewItemDefaultSetter="@OnNewItemDefaultSetter"
          ReadData="@LoadFromService">
    <DataGridColumns>
        <DataGridCommandColumn TItem="ReservationFormatted">
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
            </NewCommandTemplate>
            <SaveCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">Save</Button>
            </SaveCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
            </DeleteCommandTemplate>
            <CancelCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>


        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.Id)" Caption="ID" Sortable="true"/>
        <DataGridNumericColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.VehicleId)" Caption="Vehicle Id" Editable="true"/>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.VehicleName)" Caption="Vehicle Name" Editable="false"/>
        <DataGridNumericColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.CustomerId)" Caption="Customer ID" Editable="true"/>
        <DataGridNumericColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.EmployeeId)" Caption="Employee ID" Editable="true"/>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.SecurityDeposit)" Caption="Security Deposit" Editable="false"
                        DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")"/>
        <DataGridDateColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.DateCreated)" Caption="Date Created" Editable="false" DisplayFormat="{0:dd.MM.yyyy HH:mm}"/>
        <DataGridDateColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.DateStart)" Caption="Date Start" Editable="true" DisplayFormat="{0:dd.MM.yyyy HH:mm}">
            <EditTemplate>
                <DateEdit TValue="DateTime?" Date="@((DateTime?)context.CellValue)" DateChanged="@(v => context.CellValue = v)" InputMode="DateInputMode.DateTime" />
            </EditTemplate>
        </DataGridDateColumn>
        <DataGridDateColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.DateEnd)" Caption="Date End" Editable="true" DisplayFormat="{0:dd.MM.yyyy HH:mm}">
            <EditTemplate>
                <DateEdit TValue="DateTime?"  Date="@((DateTime?)context.CellValue)" DateChanged="@(v => context.CellValue = v)" InputMode="DateInputMode.DateTime" />
            </EditTemplate>
        </DataGridDateColumn>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.AllowedKm)" Caption="Allowed Km" Editable="true"/>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.PaymentAmount)" Caption="Payment Amount" Editable="true"
                        DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")"/>
        <DataGridDateColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.BillDate)" Caption="Bill Date" Editable="true" DisplayFormat="{0:dd.MM.yyyy}"/>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.IsPaid)" Caption="Paid" Editable="true"/>
    </DataGridColumns>

    <EmptyTemplate>
        <div class="box">
            No Reservations were found!
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <Progress Animated="true" class="progress is-small is-primary" @ref="progressRef" Color="Color.Primary" Max="100" Value="progress" />
        </div>
    </LoadingTemplate>
</DataGrid>


@code {
    protected Progress progressRef = new();
    protected int progress;

    private bool showError = false;
    private string errorLabel = "Error label";

    private Modal modalInfo;
    private IList<ReservationFormatted> reservationList = null;

    //test parts below, delete after connection finished
    private ReservationFormatted selectedReservation;

    string selectedStatusFilter;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private void OnNewItemDefaultSetter(ReservationFormatted reservation)
    {
        reservation.DateCreated = DateTime.Now;
        StateHasChanged();
    }

    async Task OnRowInserted(SavedRowItem<ReservationFormatted, Dictionary<string, object>> item)
    {
        showError = false;
        try
        {
            if (item.Item.DateStart.CompareTo(item.Item.DateEnd) >= 0)
            {
                errorLabel = "Select valid dates, the start date must be before the end date";
                showError = true;
                return;
            }

            item.Item.DateCreated = DateTime.Now;
            var r = item.Item.ToVanillaReservation();
            r.Vehicle = await vehicleService.GetVehicleAsync(item.Item.VehicleId);
            r.Customer = await customerService.GetCustomerAsync(item.Item.CustomerId);
            r.Employee = await employeeService.GetEmployeeAsync(item.Item.EmployeeId);

            await reservationService.CreateReservationAsync(r.Vehicle.Id, r.Customer.Id, r.Employee.Id,
                r.SecurityDeposit, r.DateCreated, r.DateStart,
                r.DateEnd, r.AllowedKm, r.PaymentAmount, r.BillDate, r.IsPaid);

            reservationList = ReservationFormatted.FormatReservations(await reservationService.GetReservationsAsync());
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            errorLabel = "Error while creating";
            showError = true;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine(e);
        }
    }

    async Task OnRowUpdated(SavedRowItem<ReservationFormatted, Dictionary<string, object>> item)
    {
        showError = false;
        try
        {
            var updatingReservation = item.Item;
            if (updatingReservation.DateStart.CompareTo(updatingReservation.DateEnd) >= 0 || updatingReservation.DateStart.CompareTo(DateTime.Now) < 0)
            {
                errorLabel = "Select valid dates, the start date must be before the end date";
                showError = true;
                StateHasChanged();
                return;
            }
            
            var r = updatingReservation.ToVanillaReservation();
            var isValid = await CheckAvailabilityUtility.CheckForAvailability(r.DateStart, r.DateEnd, r.Vehicle.Id, vehicleService);

            if (!isValid)
            {
                errorLabel = "On these times, the vehicle isn't available";
                showError = true;
                StateHasChanged();
                return;
            }
            
            r.Employee = await employeeService.GetEmployeeAsync(updatingReservation.EmployeeId);
            r.Vehicle = await vehicleService.GetVehicleAsync(updatingReservation.VehicleId);
            await reservationService.UpdateReservationAsync(r);
            reservationList = ReservationFormatted.FormatReservations(await reservationService.GetReservationsAsync());
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = "Error while updating";
            showError = true;
            StateHasChanged();
        }
    }

    async Task OnRowRemoved(ReservationFormatted reservation)
    {
        showError = false;
        try
        {
            await reservationService.DeleteReservationAsync(reservation.Id);
            reservationList = ReservationFormatted.FormatReservations(await reservationService.GetReservationsAsync());
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = "Error while removing";
            showError = true;
            StateHasChanged();
        }
    }

    private void Debug()
    {
        Console.WriteLine("debugging");
        var kokot = 1;
    }

    async Task LoadFromService(DataGridReadDataEventArgs<ReservationFormatted> gridReadDataEventArgs)
    {
        showError = false;
        progressRef.Animated = true;
        progress = 0;
        await InvokeAsync(StateHasChanged);
        try
        {
            progress = 5;
            await InvokeAsync(StateHasChanged);
            var fetchedReservations = reservationService.GetReservationsAsync();
            progress = 33;
            await Task.Delay(500);
            await InvokeAsync(StateHasChanged);
            await fetchedReservations;
            progress = 66;
            await Task.Delay(500);
            await InvokeAsync(StateHasChanged);
            reservationList = ReservationFormatted.FormatReservations(fetchedReservations.Result).ToList();
            progress = 100;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            progress = 100;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine(e);
            errorLabel = "Error while loading data";
            showError = true;
        }
    }

    private bool StatusCustomerFilter(object itemValue, object searchValue)
    {
        if (searchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == itemValue?.ToString();
        }
        return true;
    }

}