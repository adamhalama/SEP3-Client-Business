@page "/AllCustomers"
@attribute [Authorize(Policy = "SecurityLevel1")]

@using CarRentalClientServer.Data
@using CarRentalClientServer.Models
@using System.Collections.Generic
@using System.Threading.Tasks
@using Blazorise.DataGrid
@using Blazorise.Extensions
@using CarRentalClientServer.Models
@inject ICustomerService CustomerData;

<Div Padding="Padding.Is4"></Div>
<Jumbotron>
    <JumbotronTitle Size="JumbotronTitleSize.Is3">Customer list</JumbotronTitle>
    <JumbotronSubtitle>
        All the customers.
    </JumbotronSubtitle>
    @if (showError)
    {
        <Paragraph TextColor="TextColor.Danger">
            @errorLabel
        </Paragraph>
    }
</Jumbotron>

<DataGrid TItem="Customer" Data="@customerList" Editable="true"
          EditMode="DataGridEditMode.Form" UseInternalEditing
          ShowPager="true" PageSize="10"
          RowUpdated="@OnRowUpdated"
          RowInserted="@OnRowInserted"
          RowRemoved="@OnRowRemoved"
          NewItemDefaultSetter="@OnNewItemDefaultSetter"
          ReadData="@LoadFromService">
    <DataGridColumns>
    <DataGridCommandColumn TItem="Customer">
        <NewCommandTemplate>
            <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
        </NewCommandTemplate>
        <SaveCommandTemplate>
            <Button Color="Color.Success" Clicked="@context.Clicked">Save</Button>
        </SaveCommandTemplate>
        <EditCommandTemplate>
            <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
        </EditCommandTemplate>
        <DeleteCommandTemplate>
            <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
        </DeleteCommandTemplate>
        <CancelCommandTemplate>
            <Button Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
        </CancelCommandTemplate>
    </DataGridCommandColumn>

    <DataGridColumn TItem="Customer" Field="@nameof(Customer.Id)" Caption="Id" Sortable="false" Editable="false"/>
    <DataGridColumn TItem="Customer" Field="@nameof(Customer.Name)" Caption="Name" Editable/>
    <DataGridColumn TItem="Customer" Field="@nameof(Customer.Email)" Caption="Email" Editable/>
    <DataGridColumn TItem="Customer" Field="@nameof(Customer.Address)" Caption="Address" Editable/>
    <DataGridColumn TItem="Customer" Field="@nameof(Customer.LicenceNumber)" Caption="Licence number" Editable/>
    <DataGridColumn TItem="Customer" Field="@nameof(Customer.Password)" Caption="Password" Displayable="false" Editable/>
</DataGridColumns>
    <EmptyTemplate>
        <div class="box">
            No Customers were found!
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <Progress class="progress is-small is-primary" @ref="progressRef" Color="Color.Primary" Max="100" Value="progress"/>
        </div>
    </LoadingTemplate>
</DataGrid>

@code {
    private IList<Customer> customerList;
    private Customer customerSelected;

    private bool showError = false;
    private string errorLabel = "Error label";
    
    protected Progress progressRef = new();
    protected int progress;
    
    async Task LoadFromService(DataGridReadDataEventArgs<Customer> gridReadDataEventArgs)
    {
        showError = false;
        progressRef.Animated = true;
        progress = 0;
        await InvokeAsync(StateHasChanged);
        try
        {
            progress = 5;
            await InvokeAsync(StateHasChanged);
            var fetchedCustomers = CustomerData.GetCustomersAsync();
            progress = 33;
            await Task.Delay(500);
            await InvokeAsync(StateHasChanged);
            await fetchedCustomers;
            progress = 66;
            await Task.Delay(500);
            await InvokeAsync(StateHasChanged);
            customerList = fetchedCustomers.Result;
            progress = 100;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            progress = 100;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine(e);
            errorLabel = "Error while loading data";
            showError = true;
        }
    }

    private void OnNewItemDefaultSetter(Customer customer)
    {
        StateHasChanged();
    }

    async Task OnRowInserted(SavedRowItem<Customer, Dictionary<string, object>> item)
    {
        showError = false;
        try
        {
            var c = item.Item;
            if (c.Address.IsNullOrEmpty() || c.Email.IsNullOrEmpty() || c.Name.IsNullOrEmpty() || c.LicenceNumber.IsNullOrEmpty())
            {
                errorLabel = "Please fill in all the fields";
                showError = true;
                return;
            }
            
            await CustomerData.CreateCustomerAsync(c.Name, c.Email, c.Password, c.Address, c.LicenceNumber);

            customerList = await CustomerData.GetCustomersAsync();
            StateHasChanged();
        }
        catch (Exception e)
        {
            errorLabel = "Error while creating";
            showError = true;
            StateHasChanged();
            Console.WriteLine(e);
        }
    }

    async Task OnRowUpdated(SavedRowItem<Customer, Dictionary<string, object>> item)
    {
        showError = false;
        try
        {
            var customer = item.Item;
            if (customer.Address.IsNullOrEmpty() || customer.Email.IsNullOrEmpty() || customer.Name.IsNullOrEmpty() || customer.LicenceNumber.IsNullOrEmpty())
            {
                errorLabel = "Please fill in all the fields";
                showError = true;
                return;
            }
            
            await CustomerData.UpdateCustomerAsync(customer);

            customerList = await CustomerData.GetCustomersAsync();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = "Error while updating";
            showError = true;
            StateHasChanged();
        }
    }

    async Task OnRowRemoved(Customer customer)
    {
        showError = false;
        try
        {
            await CustomerData.DeleteCustomerAsync(customer.Id);

            customerList = await CustomerData.GetCustomersAsync();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = "Error while removing";
            showError = true;
            StateHasChanged();
        }
    }
    
    /*
    protected override async Task OnInitializedAsync()
    {
        customerList = new()
        {
            new()
            {
                Id = 1,
                Name = "TEST1",
                Email = "CUSTOMER1@TEST.COM",
                Password = "test1",
                Address = "TEST ADDRESS A",
                LicenceNumber = "LICENCE TEST1"
            },
            new()
            {
                Id = 2,
                Name = "TEST2",
                Email = "CUSTOMER2@TEST.COM",
                Password = "test2",
                Address = "TEST ADDRESS B",
                LicenceNumber = "LICENCE TEST2"
            },
            new()
            {
                Id = 3,
                Name = "TEST3",
                Email = "CUSTOMER3@TEST.COM",
                Password = "test3",
                Address = "TEST ADDRESS C",
                LicenceNumber = "LICENCE TEST3"
            }
        };
    }
    */
}