@using CarRentalClientServer.Models
@using CarRentalClientServer.Data
@using CarRentalClientServer.Authentification
@using System.Security.Claims

@inject NavigationManager NavMgr
@inject ICustomerService customerService;
@inject AuthenticationStateProvider authenticationStateProvider

<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Light"
     ThemeContrast="ThemeContrast.Light"
     Shadow="Shadow.Default">
    <BarBrand>

    </BarBrand>
    <BarToggler/>
    <BarMenu>
        <BarEnd>
            <BarItem>
                <BarLink To="/">Home</BarLink>
            </BarItem>
            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>Support</BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem Clicked="@ContactClicked">Contact us</BarDropdownItem>
                        <BarDropdownDivider/>
                        <BarDropdownItem Clicked="@AboutClicked">About us</BarDropdownItem>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
            <AuthorizeView>

                <NotAuthorized>
                    <BarItem>
                        <Tooltip Text="Don't have account? Create one!" Placement="TooltipPlacement.Bottom">
                            <Button Color="Color.Primary" Clicked="@OpenSignUp">Sign up</Button>
                        </Tooltip>
                        <Tooltip Text="Already have account? Login and find a suitable car!" Placement="TooltipPlacement.Bottom">
                            <Button Color="Color.Secondary" Clicked="@OpenLogin">Log in</Button>
                        </Tooltip>
                    </BarItem>
                </NotAuthorized>
                <Authorized>
                    <BarItem>
                        <BarDropdown>
                        
                            <BarDropdownToggle> @context.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Email))?.Value</BarDropdownToggle>
                            <BarDropdownMenu>
                                <BarDropdownItem Clicked="@AccountClicked">Account page</BarDropdownItem>
                                <BarDropdownItem Clicked="@LogOut">Log out</BarDropdownItem>
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                </Authorized>
            </AuthorizeView>
        </BarEnd>
    </BarMenu>
</Bar>

@code {


    private bool isLogin = false;


    /*private async Task SignUpAsync()
    {
        Console.WriteLine("sign up clicked");
        bottomLabelSignUp = "";
        if (!rePassword.Equals(newUser.Password))
        {
            bottomLabelSignUp = "Repeated password is wrong";
            return;
        }
        try
        {
            var createdCustomer = await customerService.CreateCustomerAsync
                (newUser.Name, newUser.Email, newUser.Password, newUser.Address, newUser.LicenceNumber);
            if (createdCustomer != null)
            {
                bottomLabelSignUp = "Customer account created successfully";
                await modalSignUp.Hide();
                newUser = new Customer();
            }
        }
        catch (Exception e)
        {
            bottomLabelSignUp = "Error occured while signing up";
            Console.WriteLine(e);
        }
    }

    private async Task Login()
    {
        bottomLabelLogin = "";
        try
        {
            await ((CustomAuthenticationStateProvider) authenticationStateProvider).ValidateLogin(loginCredentials.Email, loginCredentials.Password);
    //if something goes wrong this should throw and exc, so the following code wont get executed if the user wasnt validated successfully
            isLogin = true;
            await modalLogin.Hide(); //add validate login
            loginCredentials.Password = "";
        }
        catch (Exception e)
        {
            if (e.Message.Equals("NotFound"))
            {
                bottomLabelLogin = "Login not successful: This combination of email and password is incorrect";
            }
            bottomLabelLogin = $"Login not successful: {e.Message}";
            Console.WriteLine(e);
        }
    }*/

    private void LogOut()
    {
        try
        {
            ((CustomAuthenticationStateProvider) authenticationStateProvider).Logout();
            isLogin = false;
            NavMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void OpenLogin()
    {
        NavMgr.NavigateTo("/Login");
    }


    private void OpenSignUp()
    {
        NavMgr.NavigateTo("/SignUp");
    }


    private void AccountClicked()
    {
        NavMgr.NavigateTo("/ProfileC");
    }

    private void ContactClicked()
    {
        NavMgr.NavigateTo("/ContactUs");
    }

    private void AboutClicked()
    {
        NavMgr.NavigateTo("/AboutUs");
    }

}