@page "/AllCars"
@using CarRentalClientServer.Models
@using CarRentalClientServer.Data
@inject IVehicleService vehicleService;

<Jumbotron>
    <JumbotronTitle Size="JumbotronTitleSize.Is3">Whole car list</JumbotronTitle>
    <JumbotronSubtitle>
        All the cars.
    </JumbotronSubtitle>
</Jumbotron>
<h3>We have four types of car for you.</h3>
<Bar Breakpoint="Breakpoint.Desktop" Background="Background.Light" ThemeContrast="ThemeContrast.Light" Shadow="Shadow.Small">
    <BarMenu>
        <BarStart>
            <Button Color="Color.None" Clicked="@ShowSedan">
                <img src="/Img/Sedan.png" style="width:40% " />
                <p style="position:center">Sedan</p>
            </Button>
            <Button Color="Color.None" Clicked="@ShowLuxury">
                <img src="/Img/Luxury.png" style="width:40% " />
                <p style="position:center">Luxury</p>
            </Button>
            <Button Color="Color.None" Clicked="@ShowSUV">
                <img src="/Img/SUV.png" style="width:40% " />
                <p style="position:center">SUV</p>
            </Button>
            <Button Color="Color.None" Clicked="@ShowMPV">
                <img src="/Img/MPV.png" style="width:40% " />
                <p style="position:center">MPV</p>
            </Button>
        </BarStart>
    </BarMenu>
</Bar>
<Div Padding="Padding.Is2"></Div>

<Card>
    <CardHeader>
        <CardTitle>Deatil</CardTitle>
    </CardHeader>
    <CardBody>
        <Fields>
            <Field>
                <FieldLabel>Name</FieldLabel>
                <FieldBody>
                    <TextEdit ReadOnly Text="@selectedVehicle?.Name"></TextEdit>
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Type</FieldLabel>
                <TextEdit ReadOnly Text="@selectedVehicle?.Type"></TextEdit>
            </Field>
            <Field>
                <FieldLabel>Price per day</FieldLabel>
                <NumericEdit ReadOnly Value="@selectedVehicle?.PricePerDay"></NumericEdit>
            </Field>
            <Field>
                <FieldLabel>Seat</FieldLabel>
                <NumericEdit ReadOnly Value="@selectedVehicle?.SeatsCount"></NumericEdit>
            </Field>
            <Field>
                <FieldLabel>Automatic ?</FieldLabel>
                <TextEdit ReadOnly Text="@selectedVehicle?.IsAutomatic.ToString()"></TextEdit>
            </Field>
            <Field>
                <FieldLabel>Power (kw)</FieldLabel>
                <NumericEdit ReadOnly Value="@selectedVehicle?.PowerKw"></NumericEdit>
            </Field>
            <Field>
                <FieldLabel>Fuel type</FieldLabel>
                <TextEdit ReadOnly Text="@selectedVehicle?.FuelType"></TextEdit>
            </Field>
            <Field>
                <FieldLabel>Deposit</FieldLabel>
                <NumericEdit ReadOnly Value="@selectedVehicle?.Deposit"></NumericEdit>
            </Field>
        </Fields>
    </CardBody>
</Card>

<Divider />

<DataGrid TItem="Vehicle" Data="vehicles" SelectionMode="DataGridSelectionMode.Single"
          @bind-SelectedRow="@selectedVehicle" Responsive Filterable FilterMethod="DataGridFilterMethod.Contains">
    <DataGridColumns>
        <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.Name)" Caption="Name" />
        <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.Type)" Caption="Type" CustomFilter="@TypeFilter">
            <FilterTemplate>
                <Select TValue="string" SelectedValue="@typeFilter" SelectedValueChanged="@(value => {typeFilter = value;context.TriggerFilterChange( typeFilter);})">
                    <SelectItem TValue="string" Value="@("*")">All</SelectItem>
                    <SelectItem TValue="string" Value="@("Sedan")">Sedan</SelectItem>
                    <SelectItem TValue="string" Value="@("Luxury")">Luxury</SelectItem>
                    <SelectItem TValue="string" Value="@("SUV")">SUV</SelectItem>
                    <SelectItem TValue="string" Value="@("MPV")">MPV</SelectItem>
                </Select>
            </FilterTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.PricePerDay)" Caption="Price per day" Filterable=false />
        <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.SeatsCount)" Caption="Seat" CustomFilter="@SeatFilter">
            <FilterTemplate>
                <Select TValue="string" SelectedValue="@seatFilter" SelectedValueChanged="@(value => {seatFilter = value; context.TriggerFilterChange( seatFilter );})">
                    <SelectItem TValue="string" Value="@("*")">All</SelectItem>
                    <SelectItem TValue="int" Value="@(2)">2</SelectItem>
                    <SelectItem TValue="int" Value="@(4)">4</SelectItem>
                    <SelectItem TValue="int" Value="@(5)">5</SelectItem>
                    <SelectItem TValue="int" Value="@(6)">6</SelectItem>
                    <SelectItem TValue="int" Value="@(7)">7</SelectItem>
                    <SelectItem TValue="int" Value="@(8)">8</SelectItem>
                </Select>
            </FilterTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

<Modal @ref="sedanModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Sedan</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                A sedan is a passenger car in a three-box configuration with separate compartments for engine, passenger, and cargo.
            </Paragraph>
            <Paragraph>Can carry up to 5 people. Suitable for family travel.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideSedan">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="luxuryModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Sedan</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                A luxury car is a car that provides increased levels of comfort, equipment, amenities, quality, performance, and status compared to regular cars for an increased price.
            </Paragraph>
            <Paragraph>Can carry up to 5 people. Suitable for high-end travel.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideLuxury">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="suvModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>SUV</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                A sport utility vehicle or SUV is a car classification that combines elements of road-going passenger cars with features from off-road vehicles, such as raised ground clearance and four-wheel drive.
            </Paragraph>
            <Paragraph>Can carry up to 7 people. Suitable for field trips.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideSUV">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="mpvModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>MPV</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                Minivan (sometimes called simply as van) is a North American car classification for vehicles designed to transport passengers in the rear seating row(s), with reconfigurable seats in two or three rows.
            </Paragraph>
            <Paragraph>Can carry up to 8 people. Suitable for business travel or family travel.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideMPV">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal sedanModal;
    private Modal luxuryModal;
    private Modal suvModal;
    private Modal mpvModal;
    private Vehicle selectedVehicle;
    private string typeFilter;
    private string seatFilter;

    private IList<Vehicle> vehicles;

    protected override async Task OnInitializedAsync()
    {
        Task<IList<Vehicle>> getVehiclesTask = vehicleService.GetVehiclesAsync();
        vehicles = await getVehiclesTask;
    }

    private bool TypeFilter(object itemValue, object searchValue)
    {
        if (searchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == itemValue?.ToString();
        }
        return true;
    }

    private bool SeatFilter(object seatValue, object seatSearchValue)
    {
        if (seatSearchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == seatValue?.ToString();
        }
        return true;
    }

    private Task ShowSedan()
    {
        return sedanModal.Show();
    }
    private Task HideSedan()
    {
        return sedanModal.Hide();
    }

    private Task ShowLuxury()
    {
        return luxuryModal.Show();
    }
    private Task HideLuxury()
    {
        return luxuryModal.Hide();
    }

    private Task ShowSUV()
    {
        return suvModal.Show();
    }
    private Task HideSUV()
    {
        return suvModal.Hide();
    }

    private Task ShowMPV()
    {
        return mpvModal.Show();
    }
    private Task HideMPV()
    {
        return mpvModal.Hide();
    }

    private List<Vehicle> vehicleListTest = new()
        {
            new()
            {
                Id = 1,
                Name = "CAR1",
                Type = "Sedan",
                PricePerDay = 100,
                SeatsCount = 4,
                IsAutomatic = true,
                PowerKw = 250,
                FuelType = "95",
                Deposit = 500,
            },
            new()
            {
                Id = 2,
                Name = "CAR2",
                Type = "Sedan",
                PricePerDay = 400,
                SeatsCount = 2,
                IsAutomatic = false,
                PowerKw = 400,
                FuelType = "92",
                Deposit = 800,
            },
            new()
            {
                Id = 3,
                Name = "CAR3",
                Type = "SUV",
                PricePerDay = 200,
                SeatsCount = 5,
                IsAutomatic = true,
                PowerKw = 300,
                FuelType = "95",
                Deposit = 700,
            },
            new()
            {
                Id = 4,
                Name = "CAR4",
                Type = "MPV",
                PricePerDay = 340,
                SeatsCount = 8,
                IsAutomatic = true,
                PowerKw = 300,
                FuelType = "Diesel",
                Deposit = 500,
            },
            new()
            {
                Id = 5,
                Name = "CAR5",
                Type = "SUV",
                PricePerDay = 600,
                SeatsCount = 4,
                IsAutomatic = false,
                PowerKw = 500,
                FuelType = "Diesel",
                Deposit = 1000,
            },
            new()
            {
                Id = 6,
                Name = "CAR6",
                Type = "Sedan",
                PricePerDay = 100,
                SeatsCount = 4,
                IsAutomatic = true,
                PowerKw = 250,
                FuelType = "92",
                Deposit = 500,
            },
            new()
            {
                Id = 7,
                Name = "CAR7",
                Type = "Luxury",
                PricePerDay = 730,
                SeatsCount = 4,
                IsAutomatic = true,
                PowerKw = 430,
                FuelType = "95",
                Deposit = 500,
            },
            new()
            {
                Id = 8,
                Name = "CAR8 OLD",
                Type = "MPV",
                PricePerDay = 360,
                SeatsCount = 8,
                IsAutomatic = false,
                PowerKw = 250,
                FuelType = "Diesel",
                Deposit = 500,
            }
        };
}
