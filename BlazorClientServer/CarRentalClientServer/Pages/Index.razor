@page "/"
@using CarRentalClientServer.Data
@using CarRentalClientServer.Models
@using CarRentalClientServer.Authentification
@using CarRentalClientServer.Utilities
@inject IReservationService _reservationService;
@inject IVehicleService _vehicleService;
@inject NavigationManager _navigationManager
@inject IVehicleService _vehicleData

@inject AuthenticationStateProvider authenticationStateProvider

<Div Padding="Padding.Is4"></Div>
<Heading Size="HeadingSize.Is2" Flex="Flex.JustifyContent.Center">
    Want to rent a car to travel ? Find it now !
</Heading>

@*For development and testing*@
@*<Button Clicked="@LoginCustomer">Log in as customer</Button>
<Button Clicked="@LoginEmployee">Log in as Employee</Button>*@


<Field Horizontal Flex="Flex.JustifyContent.Center">
    <Card Style="@customCardStyle">
        <CardBody Flex="Flex.JustifyContent.Center">
            <Row>
                <Column ColumnSize="ColumnSize.IsFull">
                    <Fields>
                        <Column ColumnSize="ColumnSize.IsAuto">
                            <FieldLabel>Start date:</FieldLabel>
                            <Addons>
                                <Addon AddonType="AddonType.Body">
                                    <DatePicker @ref="@_startDate" TValue="DateTime?" InputMode="DateInputMode.DateTime"/>
                                </Addon>
                                <Addon AddonType="AddonType.End">
                                    <Button Color="Color.Light" Clicked="@(() => _startDate.ToggleAsync())">
                                        <Icon Name="IconName.CalendarDay"/>
                                    </Button>
                                </Addon>
                            </Addons>
                        </Column>
                        <Column ColumnSize="ColumnSize.IsAuto">
                            <FieldLabel>End date:</FieldLabel>
                            <Addons>
                                <Addon AddonType="AddonType.Body">
                                    <DatePicker @ref="@_endDate" TValue="DateTime?" InputMode="DateInputMode.DateTime"/>
                                </Addon>
                                <Addon AddonType="AddonType.End">
                                    <Button Color="Color.Light" Clicked="@(() => _endDate.ToggleAsync())">
                                        <Icon Name="IconName.CalendarDay"/>
                                    </Button>
                                </Addon>
                            </Addons>
                        </Column>
                        <Column ColumnSize="ColumnSize.IsAuto">
                            <FieldLabel>Search!</FieldLabel> <!--Remove later-->
                            <Addons>
                                <Addon AddonType="AddonType.End">
                                    <Button Color="Color.Dark" Clicked="@SearchButtonClicked">
                                        <Icon Name="IconName.Search"/>
                                    </Button>
                                </Addon>
                            </Addons>
                        </Column>
                    </Fields>
                </Column>
            </Row>
        </CardBody>
    </Card>
</Field>

<Div Padding="Padding.Is4">
    @if (!_isCorrect)
    {
        <Alert Color="Color.Warning" Visible>
            <AlertMessage>Select correct start and end date !</AlertMessage>
        </Alert>
    }

    @if (_isSearched)
    {
        <CarRentalClientServer.Components.CarInfo/>
        <Steps>
            <Step Name="1" Completed="true">Search</Step>
            <Step Name="2">Book</Step>
            <Step Name="3">
                <Marker>
                    <Icon Name="IconName.Flag"/>
                </Marker>
                <Caption>
                    Finish
                </Caption>
            </Step>
        </Steps>

        <h3>Matched cars</h3>
        @if (_showError)
        {
            <Paragraph TextColor="TextColor.Danger">
                @_errorLabel
            </Paragraph>
        }
        <Card>
            <CardHeader>
                <CardTitle>Deatil</CardTitle>
            </CardHeader>
            <CardBody>
                <Fields>

                    <Field>
                        <FieldLabel>Name</FieldLabel>
                        <FieldBody>
                            <TextEdit ReadOnly Text="@_selectedVehicle?.Name"></TextEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Vehicle ID</FieldLabel>
                        <FieldBody>
                            <NumericEdit ReadOnly Value="@_selectedVehicle?.Id"></NumericEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Type</FieldLabel>
                        <TextEdit ReadOnly Text="@_selectedVehicle?.Type"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Price per day</FieldLabel>
                        <NumericEdit ReadOnly Value="@_selectedVehicle?.PricePerDay"></NumericEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Seat</FieldLabel>
                        <NumericEdit ReadOnly Value="@_selectedVehicle?.SeatsCount"></NumericEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Automatic ?</FieldLabel>
                        <TextEdit ReadOnly Text="@_selectedVehicle?.IsAutomatic.ToString()"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Power (kw)</FieldLabel>
                        <NumericEdit ReadOnly Value="@_selectedVehicle?.PowerKw"></NumericEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Fuel type</FieldLabel>
                        <TextEdit ReadOnly Text="@_selectedVehicle?.FuelType"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Deposit</FieldLabel>
                        <NumericEdit ReadOnly Value="@_selectedVehicle?.Deposit"></NumericEdit>
                    </Field>
                    <Field>
                        <Button Color="Color.Primary" Clicked="@(() => BookCarClicked(_selectedVehicle.Id))">Book this car</Button>
                    </Field>
                </Fields>
            </CardBody>
        </Card>

        <Divider/>
        <Bar Breakpoint="Breakpoint.Desktop" Background="Background.Light" ThemeContrast="ThemeContrast.Light" Shadow="Shadow.Small">
            <BarMenu>
                <BarStart>
                    <Button Color="Color.None" Clicked="@ShowSedan">
                        <img src="/Img/Sedan.png" style="width:40% "/>
                        <p style="position:center">Sedan</p>
                    </Button>
                    <Button Color="Color.None" Clicked="@ShowLuxury">
                        <img src="/Img/Luxury.png" style="width:40% "/>
                        <p style="position:center">Luxury</p>
                    </Button>
                    <Button Color="Color.None" Clicked="@ShowSUV">
                        <img src="/Img/SUV.png" style="width:40% "/>
                        <p style="position:center">SUV</p>
                    </Button>
                    <Button Color="Color.None" Clicked="@ShowMPV">
                        <img src="/Img/MPV.png" style="width:40% "/>
                        <p style="position:center">MPV</p>
                    </Button>
                </BarStart>
            </BarMenu>
        </Bar>
        <Divider/>

        <DataGrid TItem="Vehicle" Data="_vehicleList"
                  ShowPager="true" PageSize="10"
                  SelectionMode="DataGridSelectionMode.Single"
                  @bind-SelectedRow="@_selectedVehicle"
                  Responsive Filterable FilterMethod="DataGridFilterMethod.Contains"
                  ReadData="@LoadFromService">
            <DataGridColumns>
                <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.Name)" Caption="Name"/>
                <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.Type)" Caption="Type" CustomFilter="@TypeFilter">
                    <FilterTemplate>
                        <Select TValue="string" SelectedValue="@_typeFilter" SelectedValueChanged="@(value => {_typeFilter = value;context.TriggerFilterChange(_typeFilter);})">
                            <SelectItem TValue="string" Value="@("*")">All</SelectItem>
                            <SelectItem TValue="string" Value="@("Sedan")">Sedan</SelectItem>
                            <SelectItem TValue="string" Value="@("Luxury")">Luxury</SelectItem>
                            <SelectItem TValue="string" Value="@("SUV")">SUV</SelectItem>
                            <SelectItem TValue="string" Value="@("MPV")">MPV</SelectItem>
                        </Select>
                    </FilterTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.PricePerDay)" Caption="Price per day" Filterable="false"/>
                <DataGridColumn TItem="Vehicle" Field="@nameof(Vehicle.SeatsCount)" Caption="Seat" CustomFilter="@SeatFilter">
                    <FilterTemplate>
                        <Select TValue="string" SelectedValue="@_seatFilter" SelectedValueChanged="@(value => {_seatFilter = value; context.TriggerFilterChange(_seatFilter);})">
                            <SelectItem TValue="string" Value="@("*")">All</SelectItem>
                            <SelectItem TValue="int" Value="@(2)">2</SelectItem>
                            <SelectItem TValue="int" Value="@(4)">4</SelectItem>
                            <SelectItem TValue="int" Value="@(5)">5</SelectItem>
                            <SelectItem TValue="int" Value="@(6)">6</SelectItem>
                            <SelectItem TValue="int" Value="@(7)">7</SelectItem>
                            <SelectItem TValue="int" Value="@(8)">8</SelectItem>
                        </Select>
                    </FilterTemplate>
                </DataGridColumn>
            </DataGridColumns>
            <EmptyTemplate>
                <div class="box">
                    No Cars were found!
                </div>
            </EmptyTemplate>
            <LoadingTemplate>
                <div class="box">
                    <Progress class="progress is-small is-primary" @ref="ProgressRef" Color="Color.Primary" Max="100" Value="Progress"/>
                </div>
            </LoadingTemplate>
        </DataGrid>
    }
</Div>


<CardDeck>
    <Card Margin="Margin.Is4.FromBottom">
        <CardImage Source="Img/CarRent.png" Alt="Placeholder image"></CardImage>
        <CardBody>
            <CardTitle Size="5">Quick</CardTitle>
            <CardText>
                You can get your car quickly and easily. We provide cars with good conditions.
            </CardText>
        </CardBody>
    </Card>
    <Card Margin="Margin.Is4.FromBottom">
        <CardImage Source="Img/Payment.png" Alt="Placeholder image"></CardImage>
        <CardBody>
            <CardTitle Size="5">Easy to pay</CardTitle>
            <CardText>
                We support many ways for you to pay. You can pay through bank cards or mobile phone.
            </CardText>
        </CardBody>
    </Card>
    <Card Margin="Margin.Is4.FromBottom">
        <CardImage Source="Img/Travel.png" Alt="Placeholder image"></CardImage>
        <CardBody>
            <CardTitle Size="5">Travel</CardTitle>
            <CardText>
                Enjoy your trip! If you have any questions, please contact us.
            </CardText>
        </CardBody>
    </Card>
</CardDeck>

<Modal @ref="_sedanModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Sedan</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                A sedan is a passenger car in a three-box configuration with separate compartments for engine, passenger, and cargo.
            </Paragraph>
            <Paragraph>Can carry up to 5 people. Suitable for family travel.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideSedan">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="_luxuryModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Sedan</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                A luxury car is a car that provides increased levels of comfort, equipment, amenities, quality, performance, and status compared to regular cars for an increased price.
            </Paragraph>
            <Paragraph>Can carry up to 5 people. Suitable for high-end travel.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideLuxury">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="_suvModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>SUV</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                A sport utility vehicle or SUV is a car classification that combines elements of road-going passenger cars with features from off-road vehicles, such as raised ground clearance and four-wheel drive.
            </Paragraph>
            <Paragraph>Can carry up to 7 people. Suitable for field trips.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideSUV">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="_mpvModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>MPV</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                Minivan (sometimes called simply as van) is a North American car classification for vehicles designed to transport passengers in the rear seating row(s), with reconfigurable seats in two or three rows.
            </Paragraph>
            <Paragraph>Can carry up to 8 people. Suitable for business travel or family travel.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideMPV">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private IList<Vehicle> _vehicleList;

    protected Progress ProgressRef = new();
    protected int Progress;

    private bool _showError = false;
    private string _errorLabel = "Error label";

    DatePicker<DateTime?> _startDate;
    DatePicker<DateTime?> _endDate;

    private bool _isSearched = false;
    private bool _isCorrect = false;

    string customCardStyle = $"width: 1100px";
    private Vehicle _selectedVehicle;

    private string _typeFilter;
    private string _seatFilter;

    private Modal _sedanModal;
    private Modal _luxuryModal;
    private Modal _suvModal;
    private Modal _mpvModal;

    [Inject]
    IMessageService MessageService { get; set; }

    [Inject]
    INotificationService NotificationService { get; set; }

    async Task LoadFromService(DataGridReadDataEventArgs<Vehicle> gridReadDataEventArgs)
    {
        _showError = false;
        if (!_startDate.Date.HasValue || !_endDate.Date.HasValue)
        {
            _errorLabel = "Enter valid dates";
            _showError = true;
            return;
        }

        ProgressRef.Animated = true;
        Progress = 0;
        await InvokeAsync(StateHasChanged);
        try
        {
            Progress = 5;
            await InvokeAsync(StateHasChanged);
            var fetchedVehicles = _vehicleData.GetAvailableVehiclesAsync(TimeConversionUtility.DateTimeToUnix(_startDate.Date.Value), TimeConversionUtility.DateTimeToUnix(_endDate.Date.Value));
            Progress = 33;
            await Task.Delay(500);
            await InvokeAsync(StateHasChanged);
            await fetchedVehicles;
            Progress = 66;
            await Task.Delay(500);
            await InvokeAsync(StateHasChanged);
            _vehicleList = fetchedVehicles.Result;
            Progress = 100;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Progress = 100;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine(e);
            _errorLabel = "Error while loading data";
            _showError = true;
        }
    }

    private bool TypeFilter(object itemValue, object searchValue)
    {
        if (searchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == itemValue?.ToString();
        }
        return true;
    }

    private bool SeatFilter(object seatValue, object seatSearchValue)
    {
        if (seatSearchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == seatValue?.ToString();
        }
        return true;
    }

    private void SearchButtonClicked()
    {
    //search a car
        var start = _startDate.Date.Value;
        var end = _endDate.Date.Value;
        var today = DateTime.Now;
        int compNum = DateTime.Compare(start, end);
        int compNum1 = DateTime.Compare(start, today);
        int compNum2 = DateTime.Compare(end, today);
        if (compNum > 0)
        {
            this._isSearched = false;
            this._isCorrect = false;
        }
        else
        {
            if (compNum1 < 0 && compNum2 < 0)
            {
                this._isSearched = false;
                this._isCorrect = false;
            }
            else
            {
                this._isSearched = true;
                this._isCorrect = true;
            }
        }
    }

    private void BookCarClicked(long id)
    {
        if (!_startDate.Date.HasValue || !_endDate.Date.HasValue)
        {
            _errorLabel = "Pick correct dates";
            _showError = true;
            return;
        }

        long startDateTimestamp = TimeConversionUtility.DateTimeToUnix(_startDate.Date.Value);
        long endDateTimestamp = TimeConversionUtility.DateTimeToUnix(_endDate.Date.Value);
        _navigationManager.NavigateTo($"/Book/{id}/{startDateTimestamp}/{endDateTimestamp}");
    }

    private async Task LoginCustomer()
    {
        //for development and testing
        await ((CustomAuthenticationStateProvider) authenticationStateProvider).ValidateLogin("jebnuty@jano.sk", "123");
    }

    private async Task LoginEmployee()
    {
    //for development and testing
        await ((CustomAuthenticationStateProvider) authenticationStateProvider).ValidateLogin("admin@bruh.com", "admin");
    }

    protected override async Task OnInitializedAsync()
    {
    //custome

        await base.OnInitializedAsync();
    }

    private Task ShowSedan()
    {
        return _sedanModal.Show();
    }

    private Task HideSedan()
    {
        return _sedanModal.Hide();
    }

    private Task ShowLuxury()
    {
        return _luxuryModal.Show();
    }

    private Task HideLuxury()
    {
        return _luxuryModal.Hide();
    }

    private Task ShowSUV()
    {
        return _suvModal.Show();
    }

    private Task HideSUV()
    {
        return _suvModal.Hide();
    }

    private Task ShowMPV()
    {
        return _mpvModal.Show();
    }

    private Task HideMPV()
    {
        return _mpvModal.Hide();
    }

}