@page "/ReservationsEmployee"
@using CarRentalClientServer.Models
@using CarRentalClientServer.Data

@inject IReservationService reservationService;
@inject IVehicleService vehicleService;
@inject ICustomerService customerService;
@inject IEmployeeService employeeService;

<Div Padding="Padding.Is4"></Div>
<Jumbotron>
    <JumbotronTitle Size="JumbotronTitleSize.Is3">All the reservations</JumbotronTitle>
    <JumbotronSubtitle>
        The whole reservation list.
    </JumbotronSubtitle>
</Jumbotron>

<DataGrid TItem="ReservationFormatted" Data="@reservationList"
          Sortable="true" Filterable="true" Editable="true"
          EditMode="DataGridEditMode.Form" UseInternalEditing
          ShowPager="true" PageSize="10"
          RowUpdated="@OnRowUpdated"
          RowInserted="@OnRowInserted"
          RowRemoved="@OnRowRemoved"
          NewItemDefaultSetter="@OnNewItemDefaultSetter"
          ReadData="@LoadFromService"
          >
    <DataGridColumns>
        <DataGridCommandColumn TItem="ReservationFormatted">
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
            </NewCommandTemplate>
            <SaveCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">Save</Button>
            </SaveCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
            </DeleteCommandTemplate>
            <CancelCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.Id)" Caption="ID"/>
        <DataGridNumericColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.VehicleId)" Caption="Vehicle Id" Editable="true"/>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.VehicleName)" Caption="Vehicle Name" Editable="false"/>
        <DataGridNumericColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.CustomerId)" Caption="Customer ID" Editable="true"/>
        <DataGridNumericColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.EmployeeId)" Caption="Employee ID" Editable="true"/>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.SecurityDeposit)" Caption="Security Deposit" Editable="false"
                        DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")"/>
        <DataGridDateColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.DateCreated)" Caption="Date Created" Editable="false" DisplayFormat="{0:dd.MM.yyyy HH:mm}"/>
        <DataGridDateColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.DateStart)" Caption="Date Start" Editable="true" DisplayFormat="{0:dd.MM.yyyy HH:mm}">
            <EditTemplate>
                <DateEdit TValue="DateTime?" InputMode="DateInputMode.DateTime"/>
            </EditTemplate>
        </DataGridDateColumn>
        <DataGridDateColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.DateEnd)" Caption="Date End" Editable="true" DisplayFormat="{0:dd.MM.yyyy HH:mm}">
            <EditTemplate>
                <DateEdit TValue="DateTime?" InputMode="DateInputMode.DateTime"/>
            </EditTemplate>
        </DataGridDateColumn>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.AllowedKm)" Caption="Allowed Km" Editable="true"/>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.PaymentAmount)" Caption="Payment Amount" Editable="true"
                        DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")"/>
        <DataGridDateColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.BillDate)" Caption="Bill Date" Editable="true" DisplayFormat="{0:dd.MM.yyyy}"/>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.IsPaid)" Caption="Paid" Editable="true"/>
    </DataGridColumns>

    <EmptyTemplate>
        <div class="box">
            No Reservations were found!
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <Progress class="progress is-small is-primary" @ref="progressRef" Color="Color.Primary" Max="100" Value="progress"/>
        </div>
    </LoadingTemplate>
</DataGrid>


@code {
    
    protected Progress progressRef = new();
    protected int progress;

    private Modal modalInfo;
    private IList<ReservationFormatted> reservationList = null;

    //test parts below, delete after connection finished
    private ReservationFormatted selectedReservation;

    string selectedStatusFilter;

    private void OnNewItemDefaultSetter(ReservationFormatted reservation)
    {
        reservation.DateCreated = DateTime.Now;
        reservation.DateStart = DateTime.Now;
        reservation.DateEnd = DateTime.Now;
        reservation.BillDate = DateTime.Now;
        StateHasChanged();
    }

    async Task OnRowInserted(SavedRowItem<ReservationFormatted, Dictionary<string, object>> e)
    {
    //for new item
        if (e.Item.DateStart.CompareTo(e.Item.DateEnd) >= 0)
        {
    //error label
            throw new Exception();
        }

        e.Item.DateCreated = DateTime.Now;
        var r = e.Item.ToVanillaReservation();
        r.Vehicle = await vehicleService.GetVehicleAsync(e.Item.VehicleId);
        r.Customer = await customerService.GetCustomerAsync(e.Item.CustomerId);
        r.Employee = await employeeService.GetEmployeeAsync(e.Item.EmployeeId);

        await reservationService.CreateReservationAsync(r.Vehicle.Id, r.Customer.Id, r.Employee.Id,
            r.SecurityDeposit, r.DateCreated, r.DateStart,
            r.DateEnd, r.AllowedKm, r.PaymentAmount, r.BillDate, r.IsPaid);

        reservationList = ReservationFormatted.FormatReservations(await reservationService.GetReservationsAsync());
        StateHasChanged();
    }

    async Task OnRowUpdated(SavedRowItem<ReservationFormatted, Dictionary<string, object>> e)
    {
    //for update item
        var r = e.Item.ToVanillaReservation();
        r.Vehicle = await vehicleService.GetVehicleAsync(e.Item.VehicleId);
        await reservationService.UpdateReservationAsync(r);
        reservationList = ReservationFormatted.FormatReservations(await reservationService.GetReservationsAsync());
        StateHasChanged();
    }

    async Task OnRowRemoved(ReservationFormatted reservation)
    {
        await reservationService.DeleteReservationAsync(reservation.Id);
        reservationList = ReservationFormatted.FormatReservations(await reservationService.GetReservationsAsync());
        StateHasChanged();
    }

    private void Debug()
    {
        Console.WriteLine("debugging");
        var kokot = 1;
    }

    async Task LoadFromService( DataGridReadDataEventArgs<ReservationFormatted> gridReadDataEventArgs )
    {
    //remote
        progressRef.Animated = true;
        progress = 0;
        await InvokeAsync( StateHasChanged );
        try
        {
            progress = 5;
            await InvokeAsync( StateHasChanged );
            var fetchedReservations = reservationService.GetReservationsAsync();
            progress = 33;
            await Task.Delay( 500 );
            await InvokeAsync( StateHasChanged );
            await fetchedReservations;
            progress = 66;
            await Task.Delay( 500 );
            await InvokeAsync( StateHasChanged );
            reservationList = ReservationFormatted.FormatReservations(fetchedReservations.Result).ToList();
            progress = 100;
            await InvokeAsync( StateHasChanged );
        }
        catch (Exception e)
        {
            progress = 100;
            await InvokeAsync( StateHasChanged );
            Console.WriteLine(e);
        }

    //local
    //TransferReservations();
    // reservationList = ReservationFormatted.FormatReservations(reservationListTest).ToList();
        await base.OnInitializedAsync();
    }

    private bool StatusCustomerFilter(object itemValue, object searchValue)
    {
        if (searchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == itemValue?.ToString();
        }
        return true;
    }

    private List<Customer> customerTestList = new()
    {
        new()
        {
            Id = 1,
            Name = "AB"
        },
        new()
        {
            Id = 2,
            Name = "DD"
        },
        new()
        {
            Id = 3,
            Name = "EE"
        }
    };

    private List<Vehicle> vehicleListTest = new()
    {
        new()
        {
            Id = 1,
            Name = "CAR1",
            Type = "Sedan",
            PricePerDay = 100,
            SeatsCount = 4,
            IsAutomatic = true,
            PowerKw = 250,
            FuelType = "95",
            Deposit = 500,
        },
        new()
        {
            Id = 2,
            Name = "CAR2",
            Type = "Sedan",
            PricePerDay = 400,
            SeatsCount = 2,
            IsAutomatic = false,
            PowerKw = 400,
            FuelType = "92",
            Deposit = 800,
        },
        new()
        {
            Id = 3,
            Name = "CAR3",
            Type = "SUV",
            PricePerDay = 200,
            SeatsCount = 5,
            IsAutomatic = true,
            PowerKw = 300,
            FuelType = "95",
            Deposit = 700,
        },
        new()
        {
            Id = 4,
            Name = "CAR4",
            Type = "MPV",
            PricePerDay = 340,
            SeatsCount = 8,
            IsAutomatic = true,
            PowerKw = 300,
            FuelType = "Diesel",
            Deposit = 500,
        },
        new()
        {
            Id = 5,
            Name = "CAR5",
            Type = "SUV",
            PricePerDay = 600,
            SeatsCount = 4,
            IsAutomatic = false,
            PowerKw = 500,
            FuelType = "Diesel",
            Deposit = 1000,
        },
        new()
        {
            Id = 6,
            Name = "CAR6",
            Type = "Sedan",
            PricePerDay = 100,
            SeatsCount = 4,
            IsAutomatic = true,
            PowerKw = 250,
            FuelType = "92",
            Deposit = 500,
        },
        new()
        {
            Id = 7,
            Name = "CAR7",
            Type = "Luxury",
            PricePerDay = 730,
            SeatsCount = 4,
            IsAutomatic = true,
            PowerKw = 430,
            FuelType = "95",
            Deposit = 500,
        },
        new()
        {
            Id = 8,
            Name = "CAR8 OLD",
            Type = "MPV",
            PricePerDay = 360,
            SeatsCount = 8,
            IsAutomatic = false,
            PowerKw = 250,
            FuelType = "Diesel",
            Deposit = 500,
        }
    };


    private List<Reservation> reservationListTest = new()
    {
        new()
        {
            Id = 1,
            SecurityDeposit = 500,
            DateCreated = 1627870693,
            DateStart = 1627957093,
            DateEnd = 1628216293,
            AllowedKm = 1500,
            PaymentAmount = 3400,
            BillDate = 1627870950,
            IsPaid = true
        },
        new()
        {
            Id = 2,
            SecurityDeposit = 500,
            DateCreated = 1627870693,
            DateStart = 1627957093,
            DateEnd = 1628216293,
            AllowedKm = 1500,
            PaymentAmount = 5900,
            BillDate = 1627871800,
            IsPaid = false
        },
        new()
        {
            Id = 3,
            SecurityDeposit = 500,
            DateCreated = 1627870693,
            DateStart = 1627957093,
            DateEnd = 1628216293,
            AllowedKm = 1500,
            PaymentAmount = 4660,
            BillDate = 1627870950,
            IsPaid = true
        }
    };


    private void TransferReservations()
    {
        foreach (var r in reservationListTest)
        {
            ReservationFormatted formatted = new ReservationFormatted(r);
            reservationList.Add(formatted);
        }
    }



}