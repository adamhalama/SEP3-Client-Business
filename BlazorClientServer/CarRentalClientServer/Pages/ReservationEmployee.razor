@page "/ReservationsEmployee"
@using CarRentalClientServer.Models

<Div Padding="Padding.Is4"></Div>
<Jumbotron>
    <JumbotronTitle Size="JumbotronTitleSize.Is3">All the reservations</JumbotronTitle>
    <JumbotronSubtitle>
        The whole reservation list.
    </JumbotronSubtitle>
</Jumbotron>


<Div Padding="Padding.Is4"></Div>
<Card>
    <CardHeader>
        <CardTitle>Detail</CardTitle>
    </CardHeader>
    <CardBody>
        <Fields>
            

            <!--customer name-->
            <!--employee name-->
            <!--vehicle name-->
            <Field>
                <FieldLabel>Security deposit</FieldLabel>
                <FieldBody>
                    <NumericEdit ReadOnly Value="@selectedReserve?.SecurityDeposit"></NumericEdit>
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Total amount</FieldLabel>
                <FieldBody>
                    <NumericEdit ReadOnly Value="@selectedReserve?.PaymentAmount"></NumericEdit>
                </FieldBody>
            </Field>
            <!-- change type to Date in the future -->
            <Field>
                <FieldLabel>Date created</FieldLabel>
                <FieldBody>
                    <DateEdit TValue="DateTime?" ReadOnly @bind-Date="@selectedReserve?.DateCreated" />
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Date start</FieldLabel>
                <FieldBody>
                    <DateEdit TValue="DateTime?" ReadOnly @bind-Date="@selectedReserve?.DateStart" />
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Date end</FieldLabel>
                <FieldBody>
                    <DateEdit TValue="DateTime?" ReadOnly @bind-Date="@selectedReserve?.DateEnd" />
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Bill date</FieldLabel>
                <FieldBody>
                    <DateEdit TValue="DateTime?" ReadOnly @bind-Date="@selectedReserve?.BillDate" />
                </FieldBody>
            </Field>

            <Field>
                <FieldLabel>Allowed distance</FieldLabel>
                <FieldBody>
                    <NumericEdit ReadOnly Value="@selectedReserve?.AllowedKm"></NumericEdit>
                </FieldBody>
            </Field>

        </Fields>
    </CardBody>
</Card>

<Divider/>

<DataGrid TItem="ReservationFormatted" Data="@reservations"
          @bind-SelectedRow="@selectedReserve" Responsive
          Filterable FilterMethod="DataGridFilterMethod.StartsWith">
    <!--Add filter for employee name and ca rname, remove filter for amount-->
    <DataGridColumns>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.Id)" Caption="Id" Filterable=false/>
        <!--customer name-->
        <!--employee name-->
        <!--vehicle name-->
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.DateStart)"  Caption="Date start" Filterable=false/>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.BillDate)" Caption="Bill date" Filterable=false/>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.PaymentAmount)" Caption="Amount"/>
        <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.IsPaid)" Caption="Status" CustomFilter="@StatusCustomerFilter">
            <FilterTemplate>
                <Select TValue="string" SelectedValue="@selectedStatusFilter" SelectedValueChanged="@(value => {selectedStatusFilter = value;context.TriggerFilterChange(selectedStatusFilter); })">
                    <SelectItem TValue="string" Value="@("*")">All</SelectItem>
                    <SelectItem TValue="bool" Value="@(true)">Paid</SelectItem>
                    <SelectItem TValue="bool" Value="@(false)">Not paid</SelectItem>
                </Select>
            </FilterTemplate>

            <DisplayTemplate>
                @{
                    var isPaid = (context as ReservationFormatted)?.IsPaid;
                    @if (isPaid == true)
                    {
                        @("Paid")
                    }
                    else
                    {
                        @("Not paid or canceled")
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

@code {
    private Modal modalInfo;
    Customer user = new Customer();
    //connect to the database

    //test parts below, delete after connection finished
    private ReservationFormatted selectedReserve;

    string selectedStatusFilter;

    protected override async Task OnInitializedAsync()
    {
        TransferReservations();
    }

    private bool StatusCustomerFilter(object itemValue, object searchValue)
    {
        if (searchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == itemValue?.ToString();
        }
        return true;
    }

    private List<Customer> customerTestList = new()
    {
        new()
        {
            Id = 1,
            Name = "AB"
        },
        new()
        {
            Id = 2,
            Name = "DD"
        },
        new()
        {
            Id = 3,
            Name = "EE"
        }
    };

    private List<Vehicle> vehicleListTest = new()
        {
            new()
            {
                Id = 1,
                Name = "CAR1",
                Type = "Sedan",
                PricePerDay = 100,
                SeatsCount = 4,
                IsAutomatic = true,
                PowerKw = 250,
                FuelType = "95",
                Deposit = 500,
            },
            new()
            {
                Id = 2,
                Name = "CAR2",
                Type = "Sedan",
                PricePerDay = 400,
                SeatsCount = 2,
                IsAutomatic = false,
                PowerKw = 400,
                FuelType = "92",
                Deposit = 800,
            },
            new()
            {
                Id = 3,
                Name = "CAR3",
                Type = "SUV",
                PricePerDay = 200,
                SeatsCount = 5,
                IsAutomatic = true,
                PowerKw = 300,
                FuelType = "95",
                Deposit = 700,
            },
            new()
            {
                Id = 4,
                Name = "CAR4",
                Type = "MPV",
                PricePerDay = 340,
                SeatsCount = 8,
                IsAutomatic = true,
                PowerKw = 300,
                FuelType = "Diesel",
                Deposit = 500,
            },
            new()
            {
                Id = 5,
                Name = "CAR5",
                Type = "SUV",
                PricePerDay = 600,
                SeatsCount = 4,
                IsAutomatic = false,
                PowerKw = 500,
                FuelType = "Diesel",
                Deposit = 1000,
            },
            new()
            {
                Id = 6,
                Name = "CAR6",
                Type = "Sedan",
                PricePerDay = 100,
                SeatsCount = 4,
                IsAutomatic = true,
                PowerKw = 250,
                FuelType = "92",
                Deposit = 500,
            },
            new()
            {
                Id = 7,
                Name = "CAR7",
                Type = "Luxury",
                PricePerDay = 730,
                SeatsCount = 4,
                IsAutomatic = true,
                PowerKw = 430,
                FuelType = "95",
                Deposit = 500,
            },
            new()
            {
                Id = 8,
                Name = "CAR8 OLD",
                Type = "MPV",
                PricePerDay = 360,
                SeatsCount = 8,
                IsAutomatic = false,
                PowerKw = 250,
                FuelType = "Diesel",
                Deposit = 500,
            }
        };


    private List<Reservation> listTest = new()
    {
        new()
        {
            Id = 1,

            SecurityDeposit = 500,
            DateCreated = 1627870693,
            DateStart = 1627957093,
            DateEnd = 1628216293,
            AllowedKm = 1500,
            PaymentAmount = 3400,
            BillDate = 1627870950,
            IsPaid = true
        },
        new()
        {
            Id = 2,


            SecurityDeposit = 500,
            DateCreated = 1627870693,
            DateStart = 1627957093,
            DateEnd = 1628216293,
            AllowedKm = 1500,
            PaymentAmount = 5900,
            BillDate = 1627871800,
            IsPaid = false
        },
        new()
        {
            Id = 3,


            SecurityDeposit = 500,
            DateCreated = 1627870693,
            DateStart = 1627957093,
            DateEnd = 1628216293,
            AllowedKm = 1500,
            PaymentAmount = 4660,
            BillDate = 1627870950,
            IsPaid = true
        }
    };

    private List<ReservationFormatted> reservations = new List<ReservationFormatted>();

    private void TransferReservations()
    {
        foreach (var r in listTest)
        {
            ReservationFormatted rfn = new ReservationFormatted(r);
            reservations.Add(rfn);
        }
    }

}