@page "/ReservationsEmployee"
@using CarRentalClientServer.Models
@using CarRentalClientServer.Data

@inject IReservationService reservationService;

<Div Padding="Padding.Is4"></Div>
<Jumbotron>
    <JumbotronTitle Size="JumbotronTitleSize.Is3">All the reservations</JumbotronTitle>
    <JumbotronSubtitle>
        The whole reservation list.
    </JumbotronSubtitle>
</Jumbotron>

<button @onclick="@(() => Debug())">
                            debug
                        </button>

<DataGrid TItem="ReservationFormatted"
          Data="@reservationList"
          @bind-SelectedRow="@selectedReservation"
          Editable
          Responsive>
    <DataGridCommandColumn TItem="ReservationFormatted">
        <NewCommandTemplate>
            <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
        </NewCommandTemplate>
        <EditCommandTemplate>
            <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
        </EditCommandTemplate>
        <SaveCommandTemplate>
            <Button Color="Color.Success" @onclick="@(SaveSelectedReservation)" Clicked="@context.Clicked">Save</Button>
        </SaveCommandTemplate>
        
    </DataGridCommandColumn>
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.Id)" Caption="#" Sortable="false"/>
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.VehicleNameAndId)" Caption="Vehicle Id&Name" Editable="false"/>
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.CustomerNameAndId)" Caption="Customer Id&Name" Editable="false"/>
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.EmployeeNameAndId)" Caption="Employee Id&Name" Editable="false"/>
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.SecurityDeposit)" Caption="Security Deposit" Editable="false" 
                    DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")"/>
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.DateCreated)" Caption="Date Created" Editable="true"/>
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.DateStart)" Caption="Date Start" Editable="true"/>
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.DateEnd)" Caption="Date End" Editable="true"/>
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.AllowedKm)" Caption="Allowed Km" Editable="true"/>
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.PaymentAmount)" Caption="Payment Amount"  Editable="true" 
                    DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")"/>
    @*<DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.PaymentAmount)" Caption="PaymentAmount" DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")" Editable="true">
        <EditTemplate>
            <NumericEdit TValue="decimal" Value="@((decimal) context.CellValue)" ValueChanged="@(v => context.CellValue = v)"/>
        </EditTemplate>
    </DataGridColumn>*@
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.BillDate)" Caption="Bill Date" Editable="true"/>
    <DataGridColumn TItem="ReservationFormatted" Field="@nameof(ReservationFormatted.IsPaid)" Caption="Paid" Editable="true"/>
</DataGrid>

@code {

    private Modal modalInfo;
    Customer user = new Customer();
    private List<ReservationFormatted> reservationList = null;
    //connect to the database

    //test parts below, delete after connection finished
    private ReservationFormatted selectedReservation;

    string selectedStatusFilter;

    private void SaveSelectedReservation()
    {      
        //if the remote is connected
        reservationService.UpdateReservationAsync(selectedReservation.ToVanillaReservation());
    }
    
    private void Debug()
    {
        Console.WriteLine("debugging");
        var kokot = 1;
    }
    
    protected override async Task OnInitializedAsync()
    {
    //remote
        var fetchedReservations = await reservationService.GetReservationsAsync();
        reservationList = ReservationFormatted.FormatReservations(fetchedReservations).ToList();

    //local
    //TransferReservations();
        // reservationList = ReservationFormatted.FormatReservations(reservationListTest).ToList();


        await base.OnInitializedAsync();
    }

    private bool StatusCustomerFilter(object itemValue, object searchValue)
    {
        if (searchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == itemValue?.ToString();
        }
        return true;
    }

    private List<Customer> customerTestList = new()
    {
        new()
        {
            Id = 1,
            Name = "AB"
        },
        new()
        {
            Id = 2,
            Name = "DD"
        },
        new()
        {
            Id = 3,
            Name = "EE"
        }
    };

    private List<Vehicle> vehicleListTest = new()
    {
        new()
        {
            Id = 1,
            Name = "CAR1",
            Type = "Sedan",
            PricePerDay = 100,
            SeatsCount = 4,
            IsAutomatic = true,
            PowerKw = 250,
            FuelType = "95",
            Deposit = 500,
        },
        new()
        {
            Id = 2,
            Name = "CAR2",
            Type = "Sedan",
            PricePerDay = 400,
            SeatsCount = 2,
            IsAutomatic = false,
            PowerKw = 400,
            FuelType = "92",
            Deposit = 800,
        },
        new()
        {
            Id = 3,
            Name = "CAR3",
            Type = "SUV",
            PricePerDay = 200,
            SeatsCount = 5,
            IsAutomatic = true,
            PowerKw = 300,
            FuelType = "95",
            Deposit = 700,
        },
        new()
        {
            Id = 4,
            Name = "CAR4",
            Type = "MPV",
            PricePerDay = 340,
            SeatsCount = 8,
            IsAutomatic = true,
            PowerKw = 300,
            FuelType = "Diesel",
            Deposit = 500,
        },
        new()
        {
            Id = 5,
            Name = "CAR5",
            Type = "SUV",
            PricePerDay = 600,
            SeatsCount = 4,
            IsAutomatic = false,
            PowerKw = 500,
            FuelType = "Diesel",
            Deposit = 1000,
        },
        new()
        {
            Id = 6,
            Name = "CAR6",
            Type = "Sedan",
            PricePerDay = 100,
            SeatsCount = 4,
            IsAutomatic = true,
            PowerKw = 250,
            FuelType = "92",
            Deposit = 500,
        },
        new()
        {
            Id = 7,
            Name = "CAR7",
            Type = "Luxury",
            PricePerDay = 730,
            SeatsCount = 4,
            IsAutomatic = true,
            PowerKw = 430,
            FuelType = "95",
            Deposit = 500,
        },
        new()
        {
            Id = 8,
            Name = "CAR8 OLD",
            Type = "MPV",
            PricePerDay = 360,
            SeatsCount = 8,
            IsAutomatic = false,
            PowerKw = 250,
            FuelType = "Diesel",
            Deposit = 500,
        }
    };


    private List<Reservation> reservationListTest = new()
    {
        new()
        {
            Id = 1,
            SecurityDeposit = 500,
            DateCreated = 1627870693,
            DateStart = 1627957093,
            DateEnd = 1628216293,
            AllowedKm = 1500,
            PaymentAmount = 3400,
            BillDate = 1627870950,
            IsPaid = true
        },
        new()
        {
            Id = 2,
            SecurityDeposit = 500,
            DateCreated = 1627870693,
            DateStart = 1627957093,
            DateEnd = 1628216293,
            AllowedKm = 1500,
            PaymentAmount = 5900,
            BillDate = 1627871800,
            IsPaid = false
        },
        new()
        {
            Id = 3,
            SecurityDeposit = 500,
            DateCreated = 1627870693,
            DateStart = 1627957093,
            DateEnd = 1628216293,
            AllowedKm = 1500,
            PaymentAmount = 4660,
            BillDate = 1627870950,
            IsPaid = true
        }
    };


    private void TransferReservations()
    {
        foreach (var r in reservationListTest)
        {
            ReservationFormatted formatted = new ReservationFormatted(r);
            reservationList.Add(formatted);
        }
    }

}